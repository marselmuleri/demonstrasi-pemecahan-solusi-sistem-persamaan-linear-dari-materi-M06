import numpy as np
# Sistem Persamaan Non-linear: f1(x, y) = u = x^2 + xy - 10 = 0, f2(x, y) = v = y + 3xy^2 - 57 = 0
def f1(x, y): return x**2 + x * y - 10
def f2(x, y): return y + 3 * x * y**2 - 57
# Turunan Parsial (Matriks Jacobian)
def du_dx(x, y): return 2 * x + y
def du_dy(x, y): return x
def dv_dx(x, y): return 3 * y**2
def dv_dy(x, y): return 1 + 6 * x * y
def solve_newton_raphson(x0, y0, epsilon, max_iter):
    x_r, y_r = x0, y0
    print(f"{'r':<3}{'x':<15}{'y':<15}{'deltaX':<15}{'deltaY':<15}")
    print(f"{0:<3}{x_r:<15.8f}{y_r:<15.8f}{0.0:<15.8f}{0.0:<15.8f}")
    for r in range(1, max_iter + 1):
        F = np.array([f1(x_r, y_r), f2(x_r, y_r)])
        J = np.array([[du_dx(x_r, y_r), du_dy(x_r, y_r)], [dv_dx(x_r, y_r), dv_dy(x_r, y_r)]])
        if abs(np.linalg.det(J)) < 1e-10:
            print(f"\nError: Determinan Jacobian mendekati nol pada r={r}"); return
        step = np.linalg.solve(J, -F)
        x_new, y_new = x_r + step[0], y_r + step[1]
        delta_x, delta_y = abs(x_new - x_r), abs(y_new - y_r)
        x_r, y_r = x_new, y_new
        print(f"{r:<3}{x_r:<15.8f}{y_r:<15.8f}{delta_x:<15.8f}{delta_y:<15.8f}")
        if delta_x <= epsilon and delta_y <= epsilon:
            print(f"\nKonvergen tercapai pada iterasi ke-{r}"); return
    print("\nMaksimum iterasi tercapai")
# Parameter Demonstrasi
X0, Y0, EPSILON, MAX_ITER = 1.5, 3.5, 1e-6, 100
print("--- Solusi 3: Metode Newton-Raphson untuk Sistem Non-linear ---")
solve_newton_raphson(X0, Y0, EPSILON, MAX_ITER)
