
import numpy as np
# Sistem Persamaan Non-linear: f1(x, y) = x^2 + xy - 10 = 0, f2(x, y) = y + 3xy^2 - 57 = 0
# Fungsi Iterasi (g1A, g2B) berdasarkan NIMx = 1: g1(x, y) = (10 - x^2) / y, g2(x, y) = sqrt((57 - y) / (3x))
def g1_A(x, y):
    if y == 0: return np.nan
    return (10 - x**2) / y
def g2_B(x, y):
    if x == 0: return np.nan
    val = (57 - y) / (3 * x)
    if val < 0: return np.nan
    return np.sqrt(val)
def solve_jacobi(g1, g2, x0, y0, epsilon, max_iter):
    x_r, y_r = x0, y0
    print(f"{'r':<3}{'x':<15}{'y':<15}{'deltaX':<15}{'deltaY':<15}")
    print(f"{0:<3}{x_r:<15.8f}{y_r:<15.8f}{0.0:<15.8f}{0.0:<15.8f}")
    for r in range(1, max_iter + 1):
        x_new = g1(x_r, y_r)
        y_new = g2(x_r, y_r)
        if np.isnan(x_new) or np.isnan(y_new):
            print(f"Error: Divergen/Error pada r={r}"); break
        delta_x, delta_y = abs(x_new - x_r), abs(y_new - y_r)
        x_r, y_r = x_new, y_new
        print(f"{r:<3}{x_r:<15.8f}{y_r:<15.8f}{delta_x:<15.8f}{delta_y:<15.8f}")
        if delta_x <= epsilon and delta_y <= epsilon:
            print(f"\nKonvergen tercapai pada iterasi ke-{r}"); return
    print("\nMaksimum iterasi tercapai")
# Parameter Demonstrasi
X0, Y0, EPSILON, MAX_ITER = 1.5, 3.5, 1e-6, 100
print("--- Solusi 1: Iterasi Titik Tetap (Jacobi) dengan g1A dan g2B ---")
solve_jacobi(g1_A, g2_B, X0, Y0, EPSILON, MAX_ITER)
